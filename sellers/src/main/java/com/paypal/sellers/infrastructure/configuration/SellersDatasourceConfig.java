package com.paypal.sellers.infrastructure.configuration;

import com.paypal.sellers.entity.FailedBankAccountInformation;
import com.paypal.sellers.entity.FailedSellersInformation;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.transaction.PlatformTransactionManager;

import javax.sql.DataSource;

/**
 * Datasource setup for application module
 */
@Configuration
@PropertySource({ "classpath:sellers_db.properties" })
@EnableJpaRepositories(basePackages = "com.paypal.sellers.repository",
		entityManagerFactoryRef = "sellersEntityManagerFactory", transactionManagerRef = "sellersTransactionManager")
public class SellersDatasourceConfig {

	/**
	 * Creates a bean to retrieve configuration properties for
	 * {@link DataSourceProperties}
	 * @return the {@link DataSourceProperties}
	 */
	@Bean
	@ConfigurationProperties(prefix = "sellers.db.datasource")
	public DataSourceProperties sellersDataSourceDataSourceProperties() {
		return new DataSourceProperties();
	}

	/**
	 * Creates a bean to setup the {@link DataSource} according with
	 * {@link SellersDatasourceConfig#sellersDataSourceDataSourceProperties()} properties
	 * @return the {@link DataSource}
	 */
	@Bean(name = "sellersDataSource")
	public DataSource sellersDatasource(
			final @Qualifier("sellersDataSourceDataSourceProperties") DataSourceProperties sellersDataSourceProperties) {
		return sellersDataSourceProperties.initializeDataSourceBuilder().build();
	}

	/**
	 * Creates a new {@link LocalContainerEntityManagerFactoryBean} that holds the
	 * packages within entities inside application module
	 * @param builder the {@link EntityManagerFactoryBuilder}
	 * @return the {@link LocalContainerEntityManagerFactoryBean}
	 */
	@Bean(name = "sellersEntityManagerFactory")
	public LocalContainerEntityManagerFactoryBean sellersEntityManagerFactory(final EntityManagerFactoryBuilder builder,
			final @Qualifier("sellersDataSource") DataSource sellersDataSource) {
		return builder.dataSource(sellersDataSource)
				.packages(FailedSellersInformation.class, FailedBankAccountInformation.class).build();
	}

	/**
	 * Creates a new {@link PlatformTransactionManager} using the bean generated by
	 * {@link SellersDatasourceConfig#sellersEntityManagerFactory(EntityManagerFactoryBuilder, DataSource)}
	 * @param sellersTransactionManager the {@link LocalContainerEntityManagerFactoryBean}
	 * @return the {@link PlatformTransactionManager}
	 */
	@SuppressWarnings("java:S4449")
	@Bean(name = "sellersTransactionManager")
	public PlatformTransactionManager sellersTransactionManager(
			final @Qualifier("sellersEntityManagerFactory") LocalContainerEntityManagerFactoryBean sellersTransactionManager) {
		return new JpaTransactionManager(sellersTransactionManager.getObject());
	}

}
